"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var hooks_1 = require("./hooks");
var react_2 = require("@testing-library/react");
var dom_1 = require("@testing-library/dom");
var _1 = require(".");
function sleep(ms) {
    if (ms === void 0) { ms = 1000; }
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
function clearAllCookies() {
    document.cookie.split(';').forEach(function (cookie) {
        var name = cookie.split('=')[0];
        if (name) {
            document.cookie = "".concat(name.trim(), "=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/");
        }
    });
}
var createWrapper = function () {
    return function (_a) {
        var children = _a.children;
        return react_1.default.createElement(_1.CookiesNextProvider, null, children);
    };
};
function TestMutationComponent() {
    var setCookie = (0, hooks_1.useReactiveSetCookie)();
    var deleteCookie = (0, hooks_1.useReactiveDeleteCookie)();
    var getCookie = (0, hooks_1.useReactiveGetCookie)();
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("p", { "data-testid": "cookie-value-setter" }, getCookie('test')),
        react_1.default.createElement("button", { type: "button", "data-testid": "set-cookie-button", onClick: function () {
                setCookie('test', 'test-value-from-setter-component');
            } }, "Set cookie"),
        react_1.default.createElement("button", { type: "button", "data-testid": "delete-cookie-button", onClick: function () {
                deleteCookie('test');
            } }, "Delete cookie")));
}
function TestComponent() {
    var getCookie = (0, hooks_1.useReactiveGetCookie)();
    return react_1.default.createElement("div", { "data-testid": "cookie-value-getter" }, getCookie('test'));
}
beforeEach(function () {
    clearAllCookies();
});
describe('CookiesNextContext test', function () {
    test('should set and get a cookie in a component', function () {
        document.cookie = 'test=test value from document.cookie';
        (0, react_2.render)(react_1.default.createElement(_1.CookiesNextProvider, null,
            react_1.default.createElement(TestMutationComponent, null),
            react_1.default.createElement(TestComponent, null)));
        var setterValue = dom_1.screen.getByTestId('cookie-value-setter');
        var getterValue = dom_1.screen.getByTestId('cookie-value-getter');
        expect(setterValue.textContent).toBe('test value from document.cookie');
        expect(getterValue.textContent).toBe('test value from document.cookie');
    });
    test('should set a cookie value on button click', function () { return __awaiter(void 0, void 0, void 0, function () {
        var setterButton, getterValue;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_2.render)(react_1.default.createElement(_1.CookiesNextProvider, null,
                        react_1.default.createElement(TestMutationComponent, null),
                        react_1.default.createElement(TestComponent, null)));
                    setterButton = dom_1.screen.getByTestId('set-cookie-button');
                    getterValue = dom_1.screen.getByTestId('cookie-value-getter');
                    return [4 /*yield*/, (0, react_2.act)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                setterButton.click();
                                return [2 /*return*/];
                            });
                        }); })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, (0, dom_1.waitFor)(function () {
                            expect(getterValue.textContent).toBe('test-value-from-setter-component');
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('should delete a cookie value on button click', function () { return __awaiter(void 0, void 0, void 0, function () {
        var deleteButton, getterValue;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_2.render)(react_1.default.createElement(_1.CookiesNextProvider, null,
                        react_1.default.createElement(TestMutationComponent, null),
                        react_1.default.createElement(TestComponent, null)));
                    deleteButton = dom_1.screen.getByTestId('delete-cookie-button');
                    getterValue = dom_1.screen.getByTestId('cookie-value-getter');
                    return [4 /*yield*/, (0, react_2.act)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                deleteButton.click();
                                return [2 /*return*/];
                            });
                        }); })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, (0, dom_1.waitFor)(function () {
                            expect(getterValue.textContent).toBe('');
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('should detect new cookie when polling is enabled', function () { return __awaiter(void 0, void 0, void 0, function () {
        var getterValue;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_2.render)(react_1.default.createElement(_1.CookiesNextProvider, { pollingOptions: { enabled: true, intervalMs: 2000 } },
                        react_1.default.createElement(TestMutationComponent, null),
                        react_1.default.createElement(TestComponent, null)));
                    getterValue = dom_1.screen.getByTestId('cookie-value-getter');
                    return [4 /*yield*/, (0, react_2.act)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        document.cookie = 'test=polling-test';
                                        return [4 /*yield*/, sleep(2100)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, (0, dom_1.waitFor)(function () {
                            expect(getterValue.textContent).toBe('polling-test');
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('should reflect removed cookie when polling is enabled', function () { return __awaiter(void 0, void 0, void 0, function () {
        var getterValue;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_2.act)(function () {
                        document.cookie = 'test=polling-test';
                    });
                    (0, react_2.render)(react_1.default.createElement(_1.CookiesNextProvider, { pollingOptions: { enabled: true, intervalMs: 2000 } },
                        react_1.default.createElement(TestMutationComponent, null),
                        react_1.default.createElement(TestComponent, null)));
                    getterValue = dom_1.screen.getByTestId('cookie-value-getter');
                    return [4 /*yield*/, (0, react_2.act)(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        clearAllCookies();
                                        return [4 /*yield*/, sleep(2100)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, (0, dom_1.waitFor)(function () {
                            expect(getterValue.textContent).toBe('');
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('Reactive hooks operations.', function () {
    test('useReactiveGetCookies should return all cookies.', function () {
        (0, _1.setCookie)('key1', 'value1');
        (0, _1.setCookie)('key2', 'value2');
        var result = (0, react_2.renderHook)(function () { return (0, hooks_1.useReactiveGetCookies)(); }, { wrapper: createWrapper() }).result;
        var getCookies = result.current;
        var cookies = null;
        (0, react_2.act)(function () {
            cookies = getCookies();
        });
        expect(cookies).toEqual({ key1: 'value1', key2: 'value2' });
    });
    test('useReactiveSetCookie should set a cookie', function () {
        var result = (0, react_2.renderHook)(function () { return (0, hooks_1.useReactiveSetCookie)(); }, { wrapper: createWrapper() }).result;
        var setCookie = result.current;
        (0, react_2.act)(function () {
            setCookie('testKey', 'testValue');
        });
        expect(document.cookie).toContain('testKey=testValue');
    });
    test('useReactiveDeleteCookie should remove a cookie', function () {
        var result = (0, react_2.renderHook)(function () { return (0, hooks_1.useReactiveDeleteCookie)(); }, { wrapper: createWrapper() }).result;
        var deleteCookie = result.current;
        document.cookie = 'testKey3=testValue3';
        (0, react_2.act)(function () {
            deleteCookie('testKey3');
        });
        expect(document.cookie).not.toContain('testKey3=testValue3');
    });
    test('useReactiveHasCookie should return true for existing cookie', function () {
        document.cookie = 'testKey4=testValue4';
        var result = (0, react_2.renderHook)(function () { return (0, hooks_1.useReactiveHasCookie)(); }, { wrapper: createWrapper() }).result;
        var hasCookie = result.current;
        var exists = null;
        (0, react_2.act)(function () {
            exists = hasCookie('testKey4');
        });
        expect(exists).toBe(true);
    });
    test('useReactiveHasCookie should return false for non-existing cookie', function () {
        var result = (0, react_2.renderHook)(function () { return (0, hooks_1.useReactiveHasCookie)(); }, { wrapper: createWrapper() }).result;
        var hasCookie = result.current;
        var exists = null;
        (0, react_2.act)(function () {
            exists = hasCookie('nonExistentKey5');
        });
        expect(exists).toBe(false);
    });
    test('useReactiveGetCookie should return undefined for non-existing cookie', function () {
        var result = (0, react_2.renderHook)(function () { return (0, hooks_1.useReactiveGetCookie)(); }, { wrapper: createWrapper() }).result;
        var getCookie = result.current;
        var value = null;
        (0, react_2.act)(function () {
            value = getCookie('nonExistentKey');
        });
        expect(value).toBeUndefined();
    });
    test('useReactiveSetCookie should handle complex values', function () {
        var complexValue = { key: 'value', nested: { array: [1, 2, 3] } };
        var result = (0, react_2.renderHook)(function () { return (0, hooks_1.useReactiveSetCookie)(); }, { wrapper: createWrapper() }).result;
        var setCookie = result.current;
        (0, react_2.act)(function () {
            setCookie('complexKey', complexValue);
        });
        var retrievedValue = (0, _1.getCookie)('complexKey');
        expect(typeof retrievedValue === 'string' ? JSON.parse(retrievedValue) : {}).toEqual(complexValue);
    });
});
